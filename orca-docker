#!/bin/bash

eval set -- $(getopt -o +w:hpl: -- "$@")
unset PODMAN
unset OUTPUT_LOG
unset WORKDIR_OUTSIDE

while [ $1 != '--' ]; do case $1 in
	-w) WORKDIR_CURRENT="$2"; shift ; shift ;;
	-p) PODMAN="y"; shift ;;
	-l) OUTPUT_LOG="$2"; shift ; shift ;;
    	-h) cat >&2 <<EOF
usage: $0 options [--] orca_args ...

options are:
        	-w      	directory relative to outside work directory for orca evaluation
		-p		use podman instead of docker
		-m		specify method for .log file saving
		-l		specify output log file for orca output relative to outside work directory
EOF
        exit 1;;
        --) shift; break ;;
esac; done

while [ "$1" == '--' ]; do shift; done

if [ -z "$SCRATCHDIR" ]; then
	echo Warning: SCRATCHDIR not set, / may be filled up >&2
else
	TMPDIR=$SCRATCHDIR
	export TMPDIR
fi

if [ -z "$WORKDIR_OUTSIDE" ]; then
	WORKDIR_OUTSIDE=${WORK:-$PWD}
fi

VOLUME=${WORKDIR_OUTSIDE}${WORKDIR_CURRENT}:/tmp
IMAGE="spectraes/pipeline_orca:latest"
output_log=${WORKDIR_OUTSIDE}${OUTPUT_LOG}

if [ -n "$PODMAN" ]; then
podman="podman"
podman_run="$podman run --privileged --hostname ${HOSTNAME}"

cat - >/tmp/orca-podman.$$ <<EOF
#!/bin/bash
EOF
	echo -n /opt/orca/orca >>/tmp/orca-podman.$$

	for a in "$@"; do
		echo -n " "\"$a\" >>/tmp/orca-podman.$$
	done
	echo >>/tmp/orca-podman.$$

	chmod +x /tmp/orca-podman.$$
	cat /tmp/orca-podman.$$
	
	$podman_run -v /:/host -v $VOLUME -ti $IMAGE /host/tmp/orca-podman.$$ > $output_log

	rm /tmp/orca-podman.$$
else
	cmd="docker run -v /:/host -v $VOLUME -ti $IMAGE bash -c \"/opt/orca/orca $@ > $output_log\""
	sh -c "$cmd"
fi

